{"version":3,"file":"index.js","sources":["../throttle.js","../debounce.js"],"sourcesContent":["/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param {number} delay -                  A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher)\n *                                            are most useful.\n * @param {Function} callback -               A function to be executed after delay milliseconds. The `this` context and all arguments are passed through,\n *                                            as-is, to `callback` when the throttled-function is executed.\n * @param {object} [options] -              An object to configure options.\n * @param {boolean} [options.noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds\n *                                            while the throttled-function is being called. If noTrailing is false or unspecified, callback will be executed\n *                                            one final time after the last throttled-function call. (After the throttled-function has not been called for\n *                                            `delay` milliseconds, the internal counter is reset).\n * @param {boolean} [options.noLeading] -   Optional, defaults to false. If noLeading is false, the first throttled-function call will execute callback\n *                                            immediately. If noLeading is true, the first the callback execution will be skipped. It should be noted that\n *                                            callback will never executed if both noLeading = true and noTrailing = true.\n * @param {boolean} [options.debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is\n *                                            false (at end), schedule `callback` to execute after `delay` ms.\n *\n * @returns {Function} A new, throttled, function.\n */\nexport default function (delay, callback, options) {\n\tconst {\n\t\tnoTrailing = false,\n\t\tnoLeading = false,\n\t\tdebounceMode = undefined\n\t} = options || {};\n\t/*\n\t * After wrapper has stopped being called, this timeout ensures that\n\t * `callback` is executed at the proper times in `throttle` and `end`\n\t * debounce modes.\n\t */\n\tlet timeoutID;\n\tlet cancelled = false;\n\n\t// Keep track of the last time `callback` was executed.\n\tlet lastExec = 0;\n\n\t// Function to clear existing timeout\n\tfunction clearExistingTimeout() {\n\t\tif (timeoutID) {\n\t\t\tclearTimeout(timeoutID);\n\t\t}\n\t}\n\n\t// Function to cancel next exec\n\tfunction cancel(options) {\n\t\tconst { upcomingOnly = false } = options || {};\n\t\tclearExistingTimeout();\n\t\tcancelled = !upcomingOnly;\n\t}\n\n\t/*\n\t * The `wrapper` function encapsulates all of the throttling / debouncing\n\t * functionality and when executed will limit the rate at which `callback`\n\t * is executed.\n\t */\n\tfunction wrapper(...arguments_) {\n\t\tlet self = this;\n\t\tlet elapsed = Date.now() - lastExec;\n\n\t\tif (cancelled) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Execute `callback` and update the `lastExec` timestamp.\n\t\tfunction exec() {\n\t\t\tlastExec = Date.now();\n\t\t\tcallback.apply(self, arguments_);\n\t\t}\n\n\t\t/*\n\t\t * If `debounceMode` is true (at begin) this is used to clear the flag\n\t\t * to allow future `callback` executions.\n\t\t */\n\t\tfunction clear() {\n\t\t\ttimeoutID = undefined;\n\t\t}\n\n\t\tif (!noLeading && debounceMode && !timeoutID) {\n\t\t\t/*\n\t\t\t * Since `wrapper` is being called for the first time and\n\t\t\t * `debounceMode` is true (at begin), execute `callback`\n\t\t\t * and noLeading != true.\n\t\t\t */\n\t\t\texec();\n\t\t}\n\n\t\tclearExistingTimeout();\n\n\t\tif (debounceMode === undefined && elapsed > delay) {\n\t\t\tif (noLeading) {\n\t\t\t\t/*\n\t\t\t\t * In throttle mode with noLeading, if `delay` time has\n\t\t\t\t * been exceeded, update `lastExec` and schedule `callback`\n\t\t\t\t * to execute after `delay` ms.\n\t\t\t\t */\n\t\t\t\tlastExec = Date.now();\n\t\t\t\tif (!noTrailing) {\n\t\t\t\t\ttimeoutID = setTimeout(debounceMode ? clear : exec, delay);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * In throttle mode without noLeading, if `delay` time has been exceeded, execute\n\t\t\t\t * `callback`.\n\t\t\t\t */\n\t\t\t\texec();\n\t\t\t}\n\t\t} else if (noTrailing !== true) {\n\t\t\t/*\n\t\t\t * In trailing throttle mode, since `delay` time has not been\n\t\t\t * exceeded, schedule `callback` to execute `delay` ms after most\n\t\t\t * recent execution.\n\t\t\t *\n\t\t\t * If `debounceMode` is true (at begin), schedule `clear` to execute\n\t\t\t * after `delay` ms.\n\t\t\t *\n\t\t\t * If `debounceMode` is false (at end), schedule `callback` to\n\t\t\t * execute after `delay` ms.\n\t\t\t */\n\t\t\ttimeoutID = setTimeout(\n\t\t\t\tdebounceMode ? clear : exec,\n\t\t\t\tdebounceMode === undefined ? delay - elapsed : delay\n\t\t\t);\n\t\t}\n\t}\n\n\twrapper.cancel = cancel;\n\n\t// Return the wrapper function.\n\treturn wrapper;\n}\n","/* eslint-disable no-undefined */\n\nimport throttle from './throttle.js';\n\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param {number} delay -               A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param {Function} callback -          A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                        to `callback` when the debounced-function is executed.\n * @param {object} [options] -           An object to configure options.\n * @param {boolean} [options.atBegin] -  Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n *                                        after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n *                                        (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n *\n * @returns {Function} A new, debounced function.\n */\nexport default function (delay, callback, options) {\n\tconst { atBegin = false } = options || {};\n\treturn throttle(delay, callback, { debounceMode: atBegin !== false });\n}\n"],"names":["delay","callback","options","noTrailing","noLeading","debounceMode","undefined","timeoutID","cancelled","lastExec","clearExistingTimeout","clearTimeout","cancel","upcomingOnly","wrapper","arguments_","self","elapsed","Date","now","exec","apply","clear","setTimeout","atBegin","throttle"],"mappings":"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"}