{"prompt":"The YAML file is named \"cadastro2.yaml\" and it represents a screen template for a ticket logging page in a web application using the Lowdefy framework.\n\nThe YAML file includes components such as a page header menu, a card layout, a title, text input fields for ticket title and description, a button selector for ticket type, a text area for ticket description, and buttons for reset and submit actions.\n\nThe components are organized in a hierarchical structure using blocks, where each block represents a specific component or group of components. The layout properties define the positioning and styling of the components on the screen.\n\nThe event handlers define the actions to be performed when buttons are clicked, such as resetting the form or validating the input fields.\n\nAdditionally, the YAML file includes properties and annotations to customize the appearance and behavior of the components. For example, the ticket type component has predefined options, the confirm restart component is conditionally visible based on the ticket type selected, and the submit button is set as the primary action button.\n\nOverall, this YAML file provides a template for a ticket logging page with input fields, buttons, and conditional visibility that can be customized and integrated into a Lowdefy application.","completion":"id: cadastro2\ntype: PageHeaderMenu\nproperties:\n  title: New ticket # The title in the browser tab.\nlayout:\n  contentJustify: center # Center the contents of the page.\nblocks:\n  - id: content_card\n    type: Card\n    layout:\n      size: 800 # Set the size of the card so it does not fill the full screen.\n      contentGutter: 16 # Make a 16px gap between all blocks in this card.\n    blocks:\n      - id: page_heading\n        type: Title\n        properties:\n          content: Log a ticket # Change the title on the page.\n          level: 3 # Make the title a little smaller (an html `<h3>`).\n      - id: ticket_title\n        type: TextInput\n        required: true\n        properties:\n          title: Title\n      - id: ticket_type\n        type: ButtonSelector\n        required: true\n        properties:\n          title: Ticket type\n          options: # Set the allowed options\n            - Feature request\n            - Bug report\n            - Question\n      - id: ticket_description\n        type: TextArea\n        properties:\n          title: Description\n      - id: confirm_restart\n        type: ButtonSelector\n        visible: # Test if block should be visible to the user\n          _eq: # Equals operator\n            - _state: ticket_type # Get the ticket_type value from state.\n            - Bug report\n        validate:\n          # Show a warning that shows before validate is called\n          # and does not block Validate action.\n          - status: warning\n            message: If you did not restart your device, we will ask you to restart it.\n            pass:\n              _eq:\n                - _state: confirm_restart\n                - Yes\n        properties:\n          title: Did you restart your device?\n          label:\n            colon: false # Hide the label colon\n          options:\n            - Yes\n            - No\n      - id: reset_button\n        type: Button\n        layout:\n          span: 12 # Set the size of the button (span 12 of 24 columns)\n        properties:\n          title: Reset\n          block: true # Make the button fill all the space available to it\n          type: default # Make the button a plain button\n          icon: ClearOutlined\n        events:\n          onClick:\n            - id: reset\n              type: Reset\n      - id: submit_button\n        type: Button\n        layout:\n          span: 12\n        properties:\n          title: Submit\n          block: true\n          type: primary # Make the button a primary button with color\n          icon: SaveOutlined\n        events:\n          onClick:\n            - id: validate\n              type: Validate"}
{"prompt":"Based on the README and the annotations in the YAML file, the name of the YAML file \"mobile.yaml\" suggests that it is related to defining styles or configurations specific to mobile devices. \n\nThe YAML content includes a conditional statement using the \"_or\" operator. The conditional statement checks if the media size is either \"xs\" or \"sm\". This indicates that the YAML file is defining styles or configurations that should be applied when the device's media size is either extra small (xs) or small (sm), which typically corresponds to mobile devices.\n\nThe mobile.yaml file is responsible for defining specific styles or configurations tailored for mobile devices. It allows the software or application to adapt its layout, design, or functionality to provide an optimized experience for users accessing it on mobile devices.","completion":"_or:\n  - _eq:\n      - _media: size\n      - xs\n  - _eq:\n      - _media: size\n      - sm\n"}
{"prompt":"The `lowdefy.yaml` file is a YAML configuration file that defines the connections and pages for the Lowdefy Survey Example. \n\nThe YAML file specifies the following components:\n- `name`: The name of the Lowdefy project, which is \"lowdefy-example-survey\".\n- `lowdefy`: The version of Lowdefy being used, in this case, \"4.0.0-alpha.37\".\n- `licence`: The license for the project, which is \"MIT\".\n- `connections`: The connections section defines the connections to external services. In this case, there are two connections:\n  - `survey_sheet`: A connection to a Google Sheet for storing survey data. It includes properties such as the client email, private key, sheet index, spreadsheet ID, and write permissions.\n  - `employee_sheet`: A connection to a Google Sheet for reading employee data. It includes properties similar to the `survey_sheet` connection but with read permissions.\n- `pages`: The pages section defines the pages for the Lowdefy project. In this case, there are two pages:\n  - A reference to the `survey.yaml` page, which defines the survey webform.\n  - A reference to the `thank-you.yaml` page, which defines the thank you page displayed after completing the survey.\n\nOverall, the `lowdefy.yaml` file defines the connections to external services and the pages for the Lowdefy Survey Example.","completion":"name: lowdefy-example-survey\nlowdefy: 4.0.0-alpha.37\nlicence: MIT\nconnections:\n  # Create a connection to our Google sheet which will store our survey data.\n  - id: survey_sheet\n    type: GoogleSheet\n    properties:\n      client_email:\n        _secret: SHEETS_CLIENT_EMAIL\n      # Here base64 decoding is used to decode our SHEETS_PRIVATE_KEY environment variable. Our private key was saved as base64 encoded in our Netlify deployment environment variable. This is just a little hack since Netlify has a hard time processing environment variables which contains new line characters.\n      private_key:\n        _base64.decode:\n          _secret: SHEETS_PRIVATE_KEY\n      sheetIndex: 0\n      spreadsheetId: 1wldNzkdP7-qSBz8pdtYrx8dlTw01vqQ9gn6KfXPg5DU\n      write: true\n  # Create a connection to our Google sheet which will read our employee data from the employee sheet.\n  - id: employee_sheet\n    type: GoogleSheet\n    properties:\n      client_email:\n        _secret: SHEETS_CLIENT_EMAIL\n      private_key:\n        _base64.decode:\n          _secret: SHEETS_PRIVATE_KEY\n      sheetIndex: 1\n      spreadsheetId: 1wldNzkdP7-qSBz8pdtYrx8dlTw01vqQ9gn6KfXPg5DU\n      read: true\n\npages:\n  # Add references to the survey and thank-you pages\n  - _ref: pages\/survey.yaml\n  - _ref: pages\/thank-you.yaml\n"}
{"prompt":"Based on the README and the annotation in the YAML file, the `_nunjucks.yaml` file is a YAML configuration file that defines the `_nunjucks` operator in Lowdefy.\n\nThe `_nunjucks` operator is used to hydrate Nunjucks templates. It allows users to populate templates with dynamic values. The operator can be called with a string argument, in which case the template variables are the values in the `state` object. Alternatively, the template variables can be specified using the `on` argument.\n\nThe `_nunjucks` operator can be used with the following arguments:\n\n- `string`: The template to hydrate. The template variables used are the values in `state`.\n- `object`: If the `_nunjucks` operator is called with an object argument, it can have the following properties:\n  - `template: string`: The template to hydrate.\n  - `on: object`: The template variables to use when hydrating the template.\n\nThe YAML file also provides examples of how to use the `_nunjucks` operator. It demonstrates populating a template from values in `state`, populating a markdown template with different values, and using the `_nunjucks` date filter to format dates.\n\nOverall, the `_nunjucks.yaml` file defines the behavior and usage of the `_nunjucks` operator in Lowdefy, allowing users to dynamically populate Nunjucks templates with values from the `state` object or specified template variables.","completion":"# Copyright 2020-2023 Lowdefy, Inc\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n_ref:\n  path: templates\/operators.yaml.njk\n  transformer: templates\/operatorsMethodTransformer.js\n  vars:\n    pageId: _nunjucks\n    pageTitle: _nunjucks\n    filePath: operators\/_nunjucks.yaml\n    types: |\n      ```\n      (template: string): string\n      (arguments: {template: string, on: object}): string\n      ```\n    description: |\n      The `_nunjucks` hydrates a [Nunjucks](https:\/\/mozilla.github.io\/nunjucks\/) template.\n\n      If called with a string argument, the template variables are the values in `state`. Otherwise template variables can be specified using the `on` argument.\n    arguments: |\n      ###### string\n      The template to hydrate. The template variables used are the values in state\n\n      ###### object\n        - `template: string`: The template to hydrate.\n        - `on: object`: The template variables to use when hydrating the template.\n    examples: |\n      ###### Populate a template from values in `state`:\n      ```yaml\n      _nunjucks: Hello {{ name }}\n      ```\n      Returns: `\"Hello Steven\"` if the value of name in state is `\"Steven\"`.\n\n      ###### Populate a markdown template with different values:\n      Assuming `get_items` returns:\n      ```yaml\n      - name: Coca Cola\n        description: The original.\n      - name: Pepsi\n        description: The same but different.\n      ```\n\n      ```yaml\n      _nunjucks:\n        template: |\n          ### {{ title }}\n\n          {% for item in item_list %}\n          - {{ item.name }}: {{ item.description }}\n          {% endfor %}\n        on:\n          title: Soft drinks\n          items:\n            _request: get_items\n      ```\n      Returns:\n      ```markdown\n      ### Soft drinks\n\n      - Coca Cola: The original.\n      - Pepsi: The same but different.\n      ```\n\n      ###### Make use of the _nunjucks date filter:\n\n      ```yaml\n      _nunjucks:\n        template: {{ date | date('D MMM YYYY') }}\n        on:\n          date:\n            _date: 2022-08-01\n      ```\n\n      Returns:  `\"1 Aug 2022\"`\n\n      The `_nunjucks` date filter formats dates using the [moment.js](\/https:\/\/momentjs.com\/docs\/#\/displaying\/format\/) library.\n"}
{"prompt":"The \"create_app.yaml\" file is a YAML file that defines the layout and content of a \"create app\" box in a Lowdefy project. \n\nBased on the readme and the annotations in the YAML file, the \"create_app.yaml\" file includes the following information:\n\n- The box has an ID of \"create_app_box\" and a type of \"Box\".\n- The layout property specifies the content gutter within the box.\n- The properties property contains a style property that specifies the text alignment of the box as center.\n- The box contains two blocks: a title block and a get started button block.\n- The title block is an HTML component that displays a heading and a subheading related to creating a Lowdefy app.\n- The get started button block is a Button component that displays a button with the title \"Get Started\" and an icon.\n- The button has a style property that specifies the background color as white.\n- The button has a type property of \"link\" and an href property that specifies the URL to the Lowdefy documentation tutorial for getting started with creating an app.\n\nOverall, the \"create_app.yaml\" file provides the layout and content for a box that encourages users to create a Lowdefy app and provides a button with a link to the tutorial for getting started with app creation.","completion":"id: create_app_box\ntype: Box\nlayout:\n  contentGutter: 16\nproperties:\n  style:\n    textAlign: center\nblocks:\n  - id: create_app_title\n    type: Html\n    properties:\n      html: |\n        <h2 style=\"color: white\">\n          Want to create a Lowdefy app?\n        <\/h2>\n        <h3> Follow our easy getting started tutorial. <\/h3>\n\n  - id: get_started\n    type: Button\n    properties:\n      title: Get Started\n      icon: IoFlashOutline\n      style:\n        backgroundColor: white\n      type: link\n      href: https:\/\/docs.lowdefy.com\/tutorial-start\n"}
{"prompt":"The \"create_faster.yaml\" file is a YAML file that defines the layout and content of a \"create faster\" box in a Lowdefy project.\n\nBased on the readme and the annotations in the YAML file, the \"create_faster.yaml\" file includes the following information:\n\n- The box has an ID of \"create_faster_box\" and a type of \"Box\".\n- The box contains three blocks: an introduction block, a column 1 block, and a column 2 block.\n- The introduction block is an HTML component that displays a horizontal rule, a heading, and a subheading related to creating web apps faster with Lowdefy.\n- The column 1 block is an HTML component that displays a list of features or benefits related to creating web apps faster with Lowdefy.\n- The column 2 block is an HTML component that displays another list of features or benefits related to creating web apps faster with Lowdefy.\n- Each list item in the columns includes a heading, a horizontal rule, and a description of the feature or benefit.\n\nOverall, the \"create_faster.yaml\" file provides the layout and content for a box that highlights the advantages of using Lowdefy to create web apps faster. The features mentioned include easy-to-read and write YAML configuration, the ability to open-source apps and learn from others, the use of templates to organize apps at scale, and the ability to use preferred source control and CI tools.","completion":"id: create_faster_box\ntype: Box\nblocks:\n  - id: create_faster_intro\n    type: Html\n    properties:\n      html: |\n        <hr style=\"margin-left:0;\">\n        <h2>\n          Create web apps faster\n        <\/h2>\n        <h3>\n          Utilize your preferred developer tools and best practices.\n        <\/h3>\n\n  - id: create_faster_column_1\n    type: Html\n    layout:\n      span: 12\n    properties:\n      html: |\n        <ul>\n          <li>\n            <h4>Easy readable and writeable YAML<\/h4>\n            <hr style=\"margin-left:0;\">\n            <p>Lowdefy config is easy to learn, understand and remember. Use your favorite editor and source control tools to edit config. Yes, you can copy, paste, find, replace, use linters, nothing is nested behind a GUI.<\/p>\n          <\/li>\n          <li>\n            <h4>Open-source your apps and learn from others<\/h4>\n            <hr style=\"margin-left:0;\">\n            <p>Copy configuration from previous apps or reuse configuration from open-source projects, even join others and build amazing open-source apps. Internal tools can now be open source.<\/p>\n          <\/li>\n        <\/ul>\n\n  - id: create_faster_column_2\n    type: Html\n    layout:\n      span: 12\n    properties:\n      html: |\n        <ul>\n          <li>\n            <h4>Templates that organize your apps at scale<\/h4>\n            <hr style=\"margin-left:0;\">\n            <p>Organize your configuration in folders and define templates to create reusable elements custom to your apps, or write scripts in your favorite language to efficiently manage and scale multiple apps.<\/p>\n          <\/li>\n          <li>\n            <h4>Use the source control and CI tools you love<\/h4>\n            <hr style=\"margin-left:0;\">\n            <p>Use git to manage your configuration, review and merge changes, and run development versions of your app before deploying to production. Use the CI processes that your team are familiar with to manage your apps.<\/p>\n          <\/li>\n        <\/ul>\n"}
{"prompt":"The given YAML file is a configuration file for the `_type` operator in Lowdefy. It provides information about how to use the `_type` operator, which performs a type test on an object and returns true if the object is of the specified type. Here is a breakdown of the YAML file:\n\n- `_ref`: This is a reference to a template file that provides the content for the operator documentation.\n  - `path: templates\/operators.yaml.njk`: This specifies the path to the template file that contains the documentation content.\n  - `transformer: templates\/operatorsMethodTransformer.js`: This specifies the transformer file that will be used to process the template and generate the final documentation.\n  - `vars`: This section defines the variables that will be used in the template file to generate the documentation content.\n    - `pageId: _type`: This is the ID of the operator, which is `_type`.\n    - `pageTitle: _type`: This is the title of the operator, which is `_type`.\n    - `filePath: operators\/_type.yaml`: This is the file path where the operator configuration is stored.\n    - `build: true`: This indicates that the operator documentation should be built.\n    - `types: |`: This is a multiline string that defines the types and arguments supported by the `_type` operator.\n    - `description: |`: This is a multiline string that provides a description of the `_type` operator and its functionality.\n    - `arguments: |`: This is a multiline string that describes the arguments that can be used with the `_type` operator.\n    - `examples: |`: This is a multiline string that provides examples of how to use the `_type` operator in different scenarios.\n\nThe content of the template file will be processed by the transformer to generate the final documentation for the `_type` operator. The documentation includes information about the supported types, arguments, description, and examples of usage.\n\nOverall, this YAML file provides the configuration for generating the documentation for the `_type` operator in Lowdefy. It includes information about the supported types, arguments, and provides examples of how to use the operator in different scenarios.","completion":"# Copyright 2020-2023 Lowdefy, Inc\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n_ref:\n  path: templates\/operators.yaml.njk\n  transformer: templates\/operatorsMethodTransformer.js\n  vars:\n    pageId: _type\n    pageTitle: _type\n    filePath: operators\/_type.yaml\n    build: true\n    types: |\n      ```\n      (type: enum): boolean\n      (arguments: {\n        type: string,\n        on?: any,\n        key?: string\n      }): boolean\n      ```\n    description: |\n      The `_type` operator performs a type test on an object, and returns true if the object is of the specified type.\n\n      The regex operator has shorthand argument definitions that can be used on web client.\n    arguments: |\n      ###### object\n        - `type: enum`: __Required__ - The type to test. Can be one of:\n          - `string`\n          - `array`\n          - `date`\n          - `object`\n          - `boolean`\n          - `number`\n          - `integer`\n          - `null`\n          - `undefined`\n          - `none` (`null` or `undefined`)\n          - `primitive` (`undefined`, `null`, `string`, `number`, `boolean`, or `date`)\n        - `on: any`: The value to test. One of `on` or `key` must be specified unless the operator is used in an input block.\n        - `key: string`: The key of a value in `state` to test. One of `on` or `key` must be specified unless the operator is used in an input block.\n\n      ###### string\n      The type to test. The string shorthand can only be used in an input block, and the tested value will be the block's value.\n    examples: |\n      ###### Check if a value is a number:\n      ```yaml\n      _type:\n        type: number\n        on:\n          _state: input\n      ```\n      Returns: `true` if a number.\n\n      ###### Using the key of the value in `state`:\n      ```yaml\n      _type:\n        type: number\n        key: input\n      ```\n      Returns: `true` if a number.\n\n      ###### Using the value of the block in which the operator is evaluated:\n      ```yaml\n      id: input\n      type: TextInput\n      validate:\n        - message: This field id required.\n          status: error\n          pass:\n            _not:\n              _type: none\n      ```\n      Returns: `true` if the input is none.\n\n      ###### Test if an id in the `urlQuery` is undefined or null:\n      ```yaml\n      _type:\n        type: none\n        on:\n          _url_query: id\n      ```\n      Returns: `true` if the id is none,\n"}
{"prompt":"The name of the YAML file is \"DangerousMarkdown.yaml\". This file defines a block called \"DangerousMarkdown\" in the Lowdefy framework. The block is used to render markdown content that can include HTML elements. It uses DOMPurify to sanitize the markdown content before converting it to HTML. The YAML file includes configuration for the block, such as its category, schema, description, initial property values, and examples. The examples demonstrate how the block can be used to render markdown content with HTML elements, such as embedding an iframe in the markdown. The block provides the ability to customize the sanitization options for added security. However, it is advised to only render hardcoded or trusted markdown and HTML content, and not user input, due to security considerations.","completion":"# Copyright 2020-2023 Lowdefy, Inc\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n_ref:\n  path: templates\/blocks\/template.yaml.njk\n  vars:\n    block_type: DangerousMarkdown\n    category: display\n    schema: ..\/plugins\/blocks\/blocks-markdown\/src\/blocks\/DangerousMarkdown\/schema.json\n    filePath: blocks\/display\/DangerousMarkdown.yaml\n    init_property_values:\n      content: |\n        ## Some Html content:\n\n        <div style=\"background: #123456; padding: 10px;\"><h4 style=\"color: white;\">A simple white title box<\/h4><\/div>\n\n    description_content: |\n      Render markdown content which can include HTML elements. If the markdown content does not need to render HTML, use the [Markdown](\/Markdown) or [MarkdownWithCode](\/MarkdownWithCode) blocks instead. Specify what HTML element to allow or remove by changing the default modifying the [DOMPurify's options](https:\/\/github.com\/cure53\/DOMPurify#can-i-configure-dompurify).\n\n      > The DangerousMarkdown block sanitizes the markdown content using [DOMPurify's](https:\/\/github.com\/cure53\/DOMPurify) before converting the markdown to HTML. DangerousMarkdown provides the ability to customize the sanitization options. This comes with some security considerations, please consider [DOMPurify's Security Goals and Threat Model](https:\/\/github.com\/cure53\/DOMPurify\/wiki\/Security-Goals-&-Threat-Model) for more details regarding the security impact of using the DangerousMarkdown block.\n      >\n      > In short, it is strongly advised to never render any user input DangerousMarkdown content, only render hardcoded or trusted markdown and HTML content.\n\n    examples:\n      - title: DangerousMarkdown headings\n        block:\n          id: iframes_example\n          type: DangerousMarkdown\n          properties:\n            DOMPurifyOptions\":\n              ADD_TAGS\":\n                - iframe\n            content: |\n              # Markdown with an iframe:\n              <iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/pkCJpDleMtI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>\n"}
{"prompt":"The name of the YAML file is \"Comment.yaml\". This file defines a block called \"Comment\" in the Lowdefy framework. The Comment block is used to render a comment list item. It can be used as both a \"display\" or \"container\" category block.\n\nThe YAML file includes configuration for the block, such as its category, schema, and description. The description states that the Comment block renders a comment list item. It also mentions that the block has several areas, including \"content\", \"actions\", \"author\", and \"title\". These areas can be used to place content within the Comment block, such as the comment text, actions, author information, and title.\n\nThe YAML file also provides an example usage of the Comment block. The example demonstrates how to use the block by setting properties such as the author, content, datetime, and avatar. The avatar property is an object that defines the avatar's color, content, and shape.\n\nOverall, the Comment block in Lowdefy is useful for rendering comment list items and can be customized with various properties to display the comment content and author information.","completion":"# Copyright 2020-2023 Lowdefy, Inc\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n_ref:\n  path: templates\/blocks\/template.yaml.njk\n  vars:\n    block_type: Comment\n    category: container\n    schema: ..\/plugins\/blocks\/blocks-antd\/src\/blocks\/Comment\/schema.json\n    filePath: blocks\/container\/Comment.yaml\n    init_state_values:\n      __type_block.properties.avatar: object\n    description_content: |\n      A Comment renders a comment list item. It can be used as both a `display` or `container` category block.\n    areas:\n      - content\n      - actions\n      - author\n      - title\n    examples:\n      - title: Comment\n        block:\n          id: comment_ex\n          type: Comment\n          properties:\n            author: The Dude\n            content: Yeah, well, you know, that\u2019s just, like, your opinion, man.\n            datetime: 18 January, 1998\n            avatar:\n              color: '#402B18'\n              content: TD\n              shape: square\n"}
{"prompt":"The name of the YAML file is \"DateTimeSelector.yaml\". This file defines a block called \"DateTimeSelector\" in the Lowdefy framework. The DateTimeSelector block allows users to select a date and a time from a calendar.\n\nThe YAML file includes configuration for the block, such as its category, schema, and description. The description provides information about the functionality of the DateTimeSelector block. It states that the block allows users to select a date and a time, and it mentions the option to convert the selected time to GMT based on the user's timezone. The description also mentions that there are other date type blocks available, such as DateRangeSelector, DateTimeSelector, MonthSelector, and WeekSelector.\n\nThe DateTimeSelector block is categorized as an input block, indicating that it is used for user input. It provides a user-friendly way to select both a date and a time, which can be useful in various applications that require time-based input or scheduling.\n\nOverall, the DateTimeSelector block in Lowdefy allows users to select a specific date and time, with the option to handle timezones and convert the selected time to GMT if needed.","completion":"# Copyright 2020-2023 Lowdefy, Inc\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n_ref:\n  path: templates\/blocks\/template.yaml.njk\n  vars:\n    block_type: DateTimeSelector\n    value_type: date\n    category: input\n    schema: ..\/plugins\/blocks\/blocks-antd\/src\/blocks\/DateTimeSelector\/schema.json\n    filePath: blocks\/input\/DateTimeSelector.yaml\n    description_content: |\n      The `DateTimeSelector` block allows a user to select a date and a time from a calender.\n\n      By default, the time selected by the user is converted to GMT time, based on the timezone of the user. The selector will also display the selected time in the correct timezone for that user. If the `selectGMT` property is set to true, the value of the selector will be the time selected by the user as GMT time, and not in the timezone of the user.\n\n      > Other date type blocks are `DateRangeSelector`, `DateTimeSelector`, `MonthSelector` and `WeekSelector`.\n"}
{"prompt":"The name of the YAML file is \"DocSearch.yaml\". This file defines a block called \"DocSearch\" in the Lowdefy framework. The DocSearch block is used to render an Algolia DocSearch search box.\n\nThe YAML file includes configuration for the block, such as its category, schema, and description. The description explains that the block renders an Algolia DocSearch search box and provides instructions on how to use it. It mentions that the \"apiKey\", \"appId\", and \"indexName\" properties need to be configured to use the block. It also provides an example of how to add the necessary CSS files and preconnect optimization to the HTML head of the app using the \"appendHead\" property.\n\nThe examples section provides a standard usage example of the DocSearch block. It demonstrates how to configure the block by setting the \"apiKey\", \"appId\", and \"indexName\" properties to the appropriate values.\n\nOverall, the DocSearch block in Lowdefy allows users to integrate Algolia DocSearch functionality into their applications, providing a powerful search experience for users.","completion":"# Copyright 2020-2023 Lowdefy, Inc\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n_ref:\n  path: templates\/blocks\/template.yaml.njk\n  vars:\n    block_type: DocSearch\n    category: display\n    schema: ..\/plugins\/blocks\/blocks-algolia\/src\/blocks\/DocSearch\/schema.json\n    filePath: blocks\/display\/DocSearch.yaml\n    description_content:\n      _nunjucks:\n        on:\n          version:\n            _ref: version.yaml\n        template: |\n          This block renders a [Algolia DocSearch](https:\/\/docsearch.algolia.com\/) search box.\n\n          To use the block, the `apiKey`, `appId` and `indexName` properties need to be configured.\n\n          The DocSearch CSS files and preconnect optimisation also need to be added to the HTML head of your app using `appendHead` as follows:\n\n          ```yaml\n          lowdefy: {{ version }}\n          app:\n            html:\n              appendHead: |\n                <link rel=\"stylesheet\" href=\"https:\/\/cdn.jsdelivr.net\/npm\/@docsearch\/css@3\" \/>\n                <link rel=\"preconnect\" href=\"https:\/\/YOUR_APP_ID-dsn.algolia.net\" crossorigin \/>\n          ```\n    examples:\n      - title: Standard Usage\n        block:\n          id: standard_usage\n          type: DocSearch\n          properties:\n            apiKey: YOUR_API_KEY\n            appId: YOUR_APP_ID\n            indexName: YOUR_INDEX_NAME\n"}
{"prompt":"The name of the YAML file is \"CheckboxSwitch.yaml\". This file defines a block called \"CheckboxSwitch\" in the Lowdefy framework. The CheckboxSwitch block allows users to select a boolean value (true\/false) using a checkbox or switch UI element.\n\nThe YAML file includes configuration for the block, such as its category, schema, and description. The description states that the CheckboxSwitch block allows users to select a boolean value. It mentions that a similar switch block is available called \"Switch\" and that the CheckboxSelector block can be used to list multiple options.\n\nThe examples section provides various usage examples of the CheckboxSwitch block. These examples demonstrate different configurations, such as using only a checkbox, using only a description, using both a description and a label, and creating a checkbox for agreeing to terms and conditions.\n\nOverall, the CheckboxSwitch block in Lowdefy provides a flexible way to capture boolean values using checkboxes or switches. It can be used in various scenarios where boolean input is required, such as accepting terms and conditions or making binary choices.","completion":"# Copyright 2020-2023 Lowdefy, Inc\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n_ref:\n  path: templates\/blocks\/template.yaml.njk\n  vars:\n    block_type: CheckboxSwitch\n    value_type: any[]\n    category: input\n    schema: ..\/plugins\/blocks\/blocks-antd\/src\/blocks\/CheckboxSwitch\/schema.json\n    filePath: blocks\/input\/CheckboxSwitch.yaml\n    description_content: |\n      The `CheckboxSwitch` block allows a user to select a boolean value between (true\/false).\n\n      > A similar switch block is `Switch`. Alternatively the `CheckboxSelector` can be used to list multiple options.\n    examples:\n      - title: Checkbox only\n        block:\n          id: checkbox_example\n          type: CheckboxSwitch\n          properties:\n            label:\n              disabled: true\n      - title: Description only\n        block:\n          id: description_example\n          type: CheckboxSwitch\n          properties:\n            description: Option\n      - title: Description and label\n        block:\n          id: description_label_example\n          type: CheckboxSwitch\n          properties:\n            description: Option\n            label:\n              title: Label\n      - title: Agree to terms and conditions\n        block:\n          id: terms_example\n          type: CheckboxSwitch\n          properties:\n            description: I agree to the terms and conditions and privacy policy as found on the website.... Thoroughly I agree to the terms and conditions and privacy policy as found on the website....\n            label:\n              disabled: true\n"}
{"prompt":"The name of the Lowdefy YAML file is \"search.yaml\".\n\nBased on the README and the annotations in the YAML file, it appears that this YAML file defines a function for implementing a search feature in the case management app. The function is responsible for displaying a search box and various selectors that allow users to filter and search for cases.\n\nThe YAML file includes the following components:\n- id: This is the ID of the search box, which is \"search_box\".\n- type: This specifies the type of component, which is \"Box\". This indicates that the search box is a container component.\n- layout: This defines the layout properties for the search box, such as the content gutter.\n- blocks: This is an array of blocks that are contained within the search box.\n\nEach block represents a specific component within the search box, such as the search input box, status selector, type selector, open\/closed selector, and flagged selector. Each component has its own properties, layout, and events defined.\n\nThe properties for each component include details such as whether it is disabled (based on the tickets loading state), placeholder text, label settings, options for selectors, and size settings.\n\nThe events for each component define the actions to be performed when certain events occur, such as when the enter key is pressed in the search input or when a selection is made in a selector. The actions are referenced using the _ref keyword, which points to specific YAML files that define the actions to be taken.\n\nOverall, this YAML file defines the search functionality for the case management app, allowing users to enter search queries and apply filters to find specific cases.","completion":"id: search_box\ntype: Box\nlayout:\n  contentGutter: 6\nblocks:\n  - id: search_input_box\n    type: Box\n    layout:\n      contentGutter: 6\n    blocks:\n      - id: search_input\n        type: TextInput\n        layout:\n          flex: 1 1 auto\n        properties:\n          disabled:\n            # Logical tests that are used often are also referenced\n            # The inputs should be disabled when the tickets loading, so the user can only make one request at a time\n            # A loading state is set by the fetch_tickets action, that is used to determine if he tickets are loading\n            _ref: pages\/tickets\/logic\/tickets_loading.yaml\n          placeholder: Search\n          label:\n            disabled: true\n        events:\n          onPressEnter:\n            # Fetch the tickets when enter is pressed and the text input is focused\n            _ref: pages\/tickets\/actions\/fetch_tickets.yaml\n      - id: search_button\n        type: Button\n        layout:\n          flex: 0 1 auto\n        properties:\n          disabled:\n            _ref: pages\/tickets\/logic\/tickets_loading.yaml\n          title: Search\n          icon: AiOutlineSearch\n        events:\n          onClick:\n            _ref: pages\/tickets\/actions\/fetch_tickets.yaml\n  - id: status_selector\n    type: Selector\n    layout:\n      span: 6\n    properties:\n      disabled:\n        _ref: pages\/tickets\/logic\/tickets_loading.yaml\n      label:\n        disabled: true\n      placeholder: Status\n      options:\n        _global: statuses\n      size: small\n    events:\n      onChange:\n        _ref: pages\/tickets\/actions\/fetch_tickets.yaml\n  - id: type_selector\n    type: Selector\n    layout:\n      span: 6\n    properties:\n      disabled:\n        _ref: pages\/tickets\/logic\/tickets_loading.yaml\n      label:\n        disabled: true\n      placeholder: Type\n      options:\n        - Invoices\n        - Late Delivery\n        - Return Deposit\n        - Other\n      size: small\n    events:\n      onChange:\n        _ref: pages\/tickets\/actions\/fetch_tickets.yaml\n  - id: open_closed_selector\n    type: Selector\n    layout:\n      span: 6\n    properties:\n      allowClear: false\n      disabled:\n        _ref: pages\/tickets\/logic\/tickets_loading.yaml\n      label:\n        disabled: true\n      options:\n        - Open\n        - Closed\n      size: small\n    events:\n      onChange:\n        _ref: pages\/tickets\/actions\/fetch_tickets.yaml\n  - id: flagged_selector\n    type: CheckboxSelector\n    layout:\n      span: 6\n    properties:\n      disabled:\n        _ref: pages\/tickets\/logic\/tickets_loading.yaml\n      label:\n        disabled: true\n      options:\n        - Only flagged\n    events:\n      onChange:\n        _ref: pages\/tickets\/actions\/fetch_tickets.yaml\n"}
{"prompt":"The name of the Lowdefy YAML file is \"ticket_selected.yaml\".\n\nBased on the README and the annotations in the YAML file, it appears that this YAML file defines a function that checks whether a ticket is selected in the case management app. The function uses a logical operator to compare the value of the selected._id state to null.\n\nThe YAML file includes the following components:\n- _not: This is a logical operator that negates the result of the comparison.\n- _eq: This is a logical operator that checks if the two values are equal.\n- _state: This is a keyword that refers to the state of the application. In this case, it refers to the selected._id state.\n- selected._id: This is the ID of the selected ticket.\n\nThe function checks if the selected._id state is equal to null. If the selected ticket ID is not null, it means that a ticket is selected. The _not operator negates this result, so if the selected ticket ID is not null, the function returns false. Conversely, if the selected ticket ID is null, the function returns true.\n\nOverall, this YAML file defines a function that checks whether a ticket is selected in the case management app. It returns true if no ticket is selected (selected._id is null) and false if a ticket is selected (selected._id is not null).","completion":"_not:\n  _eq:\n    - _state: selected._id\n    - null"}
{"prompt":"The name of the Lowdefy YAML file is \"change_status_modal.yaml\".\n\nBased on the README and the annotations in the YAML file, it appears that this YAML file defines a function for displaying a change status modal in the case management app. The modal allows users to select a new status for a ticket and provide an optional comment.\n\nThe YAML file includes the following components:\n- id: This is the ID of the change status modal, which is \"selected.change_status_modal\".\n- type: This specifies the type of component, which is \"Modal\". This indicates that the change status modal is a modal component.\n- properties: This section defines the properties of the change status modal, such as the text for the OK button.\n- events: This section defines the events that occur when certain actions are taken in the change status modal. In this case, the onOk event is triggered when the user clicks the OK button.\n- blocks: This section contains the blocks that are contained within the change status modal.\n\nThe blocks section includes three blocks. The first block is a Markdown component that displays the title \"Change Status\" at the top of the modal. The second block is a Selector component that allows users to select a new status for the ticket. The required property is set to true, indicating that a status selection is required to proceed. The options for the Selector component are obtained from the global statuses. The third block is a TextArea component that allows users to provide an optional comment for the status change.\n\nThe events section defines the actions to be performed when the user clicks the OK button in the change status modal. These actions include validating the status selection, making a request to change the status of the ticket, refreshing the tickets and selected item, and setting the state with the updated values.\n\nOverall, this YAML file defines the functionality for displaying a change status modal in the case management app. It allows users to select a new status for a ticket and provide an optional comment, and performs various actions based on the user's input.","completion":"id: selected.change_status_modal\ntype: Modal\nproperties:\n  okText: Change Status\nevents:\n  onOk:\n    - id: validate\n      type: Validate\n      messages:\n        error: A status is required.\n      params: selected.change_status_selector\n    - id: change_status_on_ticket\n      type: Request\n      params: change_status_on_ticket\n    - id: refresh\n      type: Request\n      params:\n        - fetch_tickets\n        - fetch_selected\n    - id: set_state\n      type: SetState\n      params:\n        selected:\n          _request: fetch_selected.0\n        tickets_list:\n          _request: fetch_tickets\nblocks:\n  - id: selected.change_status_title\n    type: Markdown\n    style:\n      marginBottom: 16px\n    properties:\n      content: '#### Change Status'\n  - id: selected.change_status_selector\n    type: Selector\n    required: true\n    properties:\n      title: New Status\n      options:\n        _global: statuses\n  - id: selected.change_status_comment\n    type: TextArea\n    properties:\n      title: comment\n"}
{"prompt":"The YAML file provided is a template for creating a specific action called \"CallMethod\" in the Lowdefy framework. The action is used to call a method defined by another block. \n\nThe template file itself references another template file located at `templates\/actions.yaml.njk` and contains variables that are used to generate the final YAML file for the \"CallMethod\" action. The variables include the page ID, page title, file path, types, description, parameters, and examples.\n\nThe description of the \"CallMethod\" action states that it is used to call a method defined by another block. The action requires the block ID and method name as parameters, and an optional array of positional arguments.\n\nThe template also provides examples of how to use the \"CallMethod\" action. One example demonstrates how to open a modal by calling the \"toggleOpen\" method on a block with the ID \"my_modal\". Another example shows how to display a message with arguments by calling the \"open\" method on a block with the ID \"my_message\" and passing an array of arguments.\n\nOverall, this YAML file serves as a template for configuring the \"CallMethod\" action in Lowdefy, allowing users to call methods defined by other blocks and pass arguments as needed.","completion":"# Copyright 2020-2023 Lowdefy, Inc\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n_ref:\n  path: templates\/actions.yaml.njk\n  vars:\n    pageId: CallMethod\n    pageTitle: CallMethod\n    filePath: actions\/CallMethod.yaml\n    types: |\n      ```\n      (params: {\n        blockId: string,\n        method: string,\n        args?: any[]\n      }): void\n      ```\n    description: |\n      The `CallMethod` action is used to call a method defined by another block.\n    params: |\n      ###### object\n        - `blockId: string`: __Required__ - The id of the block.\n        - `method: string`: __Required__ - The name of the method that should be called.\n        - `args: any[]`: The array of positional arguments with which the method should be called.\n\n    examples: |\n      ###### Open a modal:\n      ```yaml\n      - id: toggle_modal\n        type: CallMethod\n        params:\n          blockId: my_modal\n          method: toggleOpen\n      ```\n\n      ###### Display a message with args:\n      ```yaml\n      - id: display_message\n        type: CallMethod\n        params:\n          blockId: my_message\n          method: open\n          args:\n            - content: Hello\n              duration: 4\n      ```\n"}
{"prompt":"The YAML file provided is a template for creating a specific block called \"Anchor\" in the Lowdefy framework. The block is categorized as a display block and is defined by a schema file located at `..\/plugins\/blocks\/blocks-basic\/src\/blocks\/Anchor\/schema.json`. The template also includes a description of the block, stating that it creates a clickable icon and\/or text for an anchor link.\n\nThe template file itself references another template file located at `templates\/blocks\/template.yaml.njk` and contains variables that are used to generate the final YAML file for the \"Anchor\" block. The variables include the block type, category, file path, and the description of the block.\n\nThe description of the \"Anchor\" block mentions that it creates a clickable icon and\/or text for an anchor link. It also provides a cautionary note about changing the relationship (`rel`) property of the linked URL and advises understanding the security implications. It directs users to read more about link types on the Mozilla Developer Network (MDN) documentation.\n\nOverall, this YAML file serves as a template for configuring the \"Anchor\" block in Lowdefy, allowing users to create clickable links with icons and\/or text and customize their behavior and appearance through the generated YAML file.","completion":"# Copyright 2020-2023 Lowdefy, Inc\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n_ref:\n  path: templates\/blocks\/template.yaml.njk\n  vars:\n    block_type: Anchor\n    category: display\n    schema: ..\/plugins\/blocks\/blocks-basic\/src\/blocks\/Anchor\/schema.json\n    filePath: blocks\/display\/Anchor.yaml\n    description_content: |\n      Anchor link block. Creates a clickable icon and\/ or text.\n\n      > When changing the relationship (`rel`) property of the linked URL, make sure you understand the security implications. Read more about link types [here](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTML\/Link_types).\n"}
{"prompt":"The name of the Lowdefy YAML file is \"_and.yaml\". This file contains the configuration for the \"_and\" operator in a Lowdefy app. The \"_and\" operator performs a logical \"and\" operation on an array of inputs using JavaScript truthy and falsy rules. It returns true only if all the values in the array are truthy (not false, 0, null, undefined, or an empty string). Otherwise, it returns false. \n\nThe YAML file includes the operator's ID, type, arguments, and examples. It provides examples of using the \"_and\" operator with boolean values, arrays of true and false values, and checking if two boolean inputs are true. It also demonstrates the behavior of truthy and falsy values in the \"_and\" operator.\n\n","completion":"# Copyright 2020-2023 Lowdefy, Inc\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n_ref:\n  path: templates\/operators.yaml.njk\n  transformer: templates\/operatorsMethodTransformer.js\n  vars:\n    pageId: _and\n    pageTitle: _and\n    filePath: operators\/_and.yaml\n    build: true\n    types: |\n      ```\n      (values: any[]): boolean\n      ```\n    description: |\n      The `_and` operator performs a logical `and` over an array of inputs, using javascript [truthy](https:\/\/developer.mozilla.org\/en-US\/docs\/Glossary\/Truthy) and [falsy](https:\/\/developer.mozilla.org\/en-US\/docs\/Glossary\/Falsy) rules.\n\n      It only returns true if all the values in the array are truthy (not `false`, `0`, `null`, `undefined`, or the empty string `\"\"`). Else it returns false.\n    arguments: |\n      ###### array\n      An array of values over which to perform a logical and.\n    examples: |\n      ###### Two `true` values:\n      ```yaml\n      _and:\n        - true\n        - true\n      ```\n      Returns: `true`\n\n      ###### Array of `true` and `false` values:\n      ```yaml\n      _and:\n        - true\n        - true\n        - true\n        - false\n      ```\n      Returns: `false`\n\n      ###### Check if two boolean inputs are true:\n      ```yaml\n      _and:\n        - _state: confirm_accept_terms\n        - _state: confirm_accept_privacy_policy\n      ```\n      Returns: `true` if both inputs are `true`\n\n      ###### Truthy values:\n      ```yaml\n      _and:\n        - \"Hello\"\n        - 42\n        - []\n        - key: value\n      ```\n      Returns: `true`\n\n      ###### Falsy values:\n      ```yaml\n      _and:\n        - true\n        - null\n      ```\n      Returns: `false`\n\n      ```yaml\n      _and:\n        - true\n        - 0\n      ```\n      Returns: `false`\n\n      ```yaml\n      _and:\n        - true\n        - \"\"\n      ```\n      Returns: `false`\n"}
{"prompt":"The name of the Lowdefy YAML file is \"_array.yaml\". This file contains the configuration for the \"_array\" operator in a Lowdefy app. The \"_array\" operator allows users to run JavaScript Array methods.\n\nThe YAML file includes the operator's ID, type, description, and methods. The description provides an overview of the \"_array\" operator, stating that it can be used to run JavaScript Array methods.\n\nThe \"methods\" section lists the available methods that can be used with the \"_array\" operator. Each method has a name, types, and description. The types describe the arguments and return type of the method, and the description provides information about the purpose and functionality of the method.\n\nThe listed methods include common Array methods such as \"concat\", \"copyWithin\", \"every\", \"fill\", \"filter\", \"find\", \"findIndex\", \"flat\", \"includes\", \"indexOf\", \"join\", \"lastIndexOf\", \"length\", \"map\", \"reduce\", \"reduceRight\", \"reverse\", \"slice\", \"some\", \"sort\", and \"splice\". The description for each method provides a link to the corresponding MDN documentation for further details on the method's usage and behavior.\n\nOverall, the \"_array\" operator in Lowdefy allows users to perform various operations on arrays using JavaScript Array methods, providing flexibility and versatility in array manipulation within a Lowdefy app.","completion":"# Copyright 2020-2023 Lowdefy, Inc\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n_ref:\n  path: templates\/operators.yaml.njk\n  transformer: templates\/operatorsMethodTransformer.js\n  vars:\n    pageId: _array\n    pageTitle: _array\n    filePath: operators\/_array.yaml\n    build: true\n    description: |\n      The `_array` operator can be used to run javascript [`Array`](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array) methods.\n    methods:\n      - name: concat\n        types: |\n          ```\n          (arrays: any[][]): any[]\n          ```\n        description: |\n          The `_array.concat` method [concatenates](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/concat) arrays.\n      - name: copyWithin\n        types: |\n          ```\n          (arguments: {\n            on: any[],\n            target: number,\n            start?: number,\n            end?: number\n          }): any[]\n          (arguments: [\n            on: any[],\n            target: number,\n            start?: number,\n            end?: number\n          ]): any[]\n          ```\n        description: |\n          The `_array.copyWithin` method [copies part of an array to another location in the same array](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/copyWithin) without modifying its length.\n      - name: every\n        types: |\n          ```\n          (arguments: {\n            on: any[],\n            callback: function,\n          }): boolean\n          (arguments: [\n            on: any[],\n            callback: function,\n          ]): boolean\n          ```\n        description: |\n          The `_array.every` method  tests whether [all elements in the array pass](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/every) the test implemented by the provided function. It returns a Boolean value.\n      - name: fill\n        types: |\n          ```\n          (arguments: {\n            on: any[],\n            value: any,\n            start?: number,\n            end?: number\n          }): any[]\n          (arguments: [\n            on: any[],\n            value: number,\n            start?: number,\n            end?: number\n          ]): any[]\n          ```\n        description: |\n          The `_array.fill` method [changes all elements in an array to a static value](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/fill), from a `start` index to an `end` index.\n      - name: filter\n        types: |\n          ```\n          (arguments: {\n            on: any[],\n            callback: function,\n          }): any[]\n          (arguments: [\n            on: any[],\n            callback: function,\n          ]): any[]\n          ```\n        description: |\n          The `_array.filter` method returns [an array with all elements that pass the test](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/filter) implemented by the provided function.\n      - name: find\n        types: |\n          ```\n          (arguments: {\n            on: any[],\n            callback: function,\n          }): any\n          (arguments: [\n            on: any[],\n            callback: function,\n          ]): any\n          ```\n        description: |\n          The `_array.find` method returns the value of the [first element in the provided array that satisfies the provided testing function](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/find). If no values satisfies the testing function, undefined is returned.\n      - name: findIndex\n        types: |\n          ```\n          (arguments: {\n            on: any[],\n            callback: function,\n          }): number\n          (arguments: [\n            on: any[],\n            callback: function,\n          ]): number\n          ```\n        description: |\n          The `_array.findIndex` method returns [the index of the first element in the array that satisfies the provided testing function](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/findIndex). Otherwise, it returns -1, indicating that no element passed the test.\n      - name: flat\n        types: |\n          ```\n          (arguments: {on: any[], depth?: number}): any[]\n          (arguments: [on: any[], depth?: number]): any[]\n          ```\n        description: |\n          The `_array.flat` method returns a array with all [sub-array elements concatenated into it recursively](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/flat) up to the specified `depth`.\n      - name: includes\n        types: |\n          ```\n          (arguments: {on: any[], value: any}): boolean\n          (arguments: [on: any[], value: any]): boolean\n          ```\n        description: |\n          The `_array.includes` method determines whether an array [includes a certain value among its entries](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/includes), returning `true` or `false` as appropriate.\n      - name: indexOf\n        types: |\n          ```\n          (arguments: {on: any[], value: any}): number\n          (arguments: [on: any[], value: any]): number\n          ```\n        description: |\n          The `_array.indexOf` method returns the [first index at which a given element can be found](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/indexOf) in the array, or `-1` if it is not present.\n      - name: join\n        types: |\n          ```\n          (arguments: {on: any[], separator?: string}): string\n          (arguments: [on: any[], separator?: string]): string\n          ```\n        description: |\n          The `_array.join` method returns [a string by concatenating all of the elements in an array](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/join), separated by commas or a specified `separator` string. If the array has only one item, then that item will be returned without using the separator.\n      - name: lastIndexOf\n        types: |\n          ```\n          (arguments: {on: any[], value: any}): number\n          (arguments: [on: any[], value: any]): number\n          ```\n        description: |\n          The `_array.lastIndexOf` method returns the [last index at which a given element can be found](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/lastIndexOf) in the array, or -1 if it is not present.\n      - name: length\n        types: |\n          ```\n          (array: any[]}): number\n          ```\n        description: |\n          The `_array.length` method returns the [number of elements](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/length) in the array.\n      - name: map\n        types: |\n          ```\n          (arguments: {\n            on: any[],\n            callback: function,\n          }): any[]\n          (arguments: [\n            on: any[],\n            callback: function,\n          ]): any[]\n          ```\n        description: |\n          The `_array.map` method returns an array populated with the results of [calling a provided function on every element](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/map) in the provided array.\n      - name: reduce\n        types: |\n          ```\n          (arguments: {\n            on: any[],\n            callback: function,\n            initialValue?: any\n          }): any\n          (arguments: [\n            on: any[],\n            callback: function,\n            initialValue?: any\n          ]): any\n          ```\n        description: |\n          The `_array.reduce` method [executes a reducer function on each element of the array](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/Reduce), resulting in single output value.\n        examples: |\n          The simplest example would probably be adding all the elements in an array:\n          ```yaml\n          sum:\n            _array.reduce:\n              on: [1, 2, 3, 4]\n              callback:\n                _function:\n                  __sum:\n                    - __args: 0\n                    - __args: 1\n          ```\n          This will return `sum: 10`\n\n          You can start off by counting from 10 by specifying an `initialValue` for the reducer:\n          ```yaml\n          sum:\n            _array.reduce:\n              on: [1, 2, 3, 4]\n              callback:\n                _function:\n                  __sum:\n                    - __args: 0\n                    - __args: 1\n              initialValue: 10\n          ```\n          This will return `sum: 20`\n\n          You can use the index of the array element to add some logic to your `callback`. For instance, when you reach index 2 of your array (the 3rd entry), add 100 instead of the current element value:\n          ```yaml\n          sum:\n            _array.reduce:\n              on: [1, 2, 3, 4]\n              callback:\n                _function:\n                  __sum:\n                    - __args: 0\n                    - __if:\n                        test:\n                          __eq:\n                            - __args: 2\n                            - 2\n                        then: 100\n                        else:\n                          __args: 1\n          ```\n          This will return `sum: 107`\n\n      - name: reduceRight\n        types: |\n          ```\n          (arguments: {\n            on: any[],\n            callback: function,\n            initialValue?: any\n          }): any\n          (arguments: [\n            on: any[],\n            callback: function,\n            initialValue?: any\n          ]): any\n          ```\n        description: |\n          The `_array.reduceRight` method [applies a function against an accumulator and each value of the array (from right-to-left)](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/ReduceRight) to reduce it to a single value.\n      - name: reverse\n        types: |\n          ```\n          (array: any[]}): any[]\n          ```\n        description: |\n          The `_array.reverse` method [reverses](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/reverse) an array.\n      - name: slice\n        types: |\n          ```\n          (arguments: {\n            on: any[],\n            start?: number,\n            end?: number\n          }): number\n          (arguments: [\n            on: any[],\n            start?: number,\n            end?: number\n          ]): number\n          ```\n        description: |\n          The `_array.slice` method returns [a portion of an array](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/slice) selected from `start` to `end` (end not included) where `start` and `end` represent the index of items in that array.\n      - name: some\n        types: |\n          ```\n          (arguments: {\n            on: any[],\n            callback: function,\n          }): boolean\n          (arguments: [\n            on: any[],\n            callback: function,\n          ]): boolean\n          ```\n        description: |\n          The `_array.some` method tests whether [at least one element in the array passes the test](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/some) implemented by the provided function. It returns a Boolean value.\n      - name: sort\n        types: |\n          ```\n          (arguments: {on: any[]}): number\n          ```\n        description: |\n          The `_array.sort` method [sorts](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/sort) the elements of an array. The sort order is ascending, built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values.\n      - name: splice\n        types: |\n          ```\n          (arguments: {\n            on: any[],\n            start: number,\n            deleteCount?: number\n            insert: any[]\n          }): number\n          (arguments: {\n            on: any[],\n            start: number,\n            deleteCount?: number,\n            insert: any[]\n          }): number\n          ```\n        description: |\n          The `_array.slice` method [changes the contents of an array](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/splice) by removing or replacing existing elements and\/or adding new elements.\n"}
